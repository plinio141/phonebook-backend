{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/index.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterInput","handleFilterChange","value","onChange","PersonForm","addPerson","findName","updatePerson","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","person","window","confirm","name","number","target","type","Persons","personsToShow","removePerson","map","p","onClick","id","axios","get","then","response","data","newObject","post","put","delete","Notification","notification","message","className","App","persons","setPersons","setFilterInput","setNotification","useEffect","servicePerson","filter","indexOf","newPersons","find","a","personUpdated","arrPerson","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6888f797.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({filterInput, handleFilterChange }) => (\n    <div>\n        flter shown with: <input\n          value={filterInput}\n          onChange={handleFilterChange}\n        />\n    </div>\n)\n\nexport default Filter","import React, { useState } from 'react'\n\nconst PersonForm = ({ addPerson, findName, updatePerson }) => {\n\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n\n\n    const addName = (event) => {\n        event.preventDefault()\n        const person = findName(newName);\n        if(person){\n            const confirm = window.confirm(`${person.name} is already added to phonebook, replace the old number whith a new one`);\n            confirm && updatePerson({...person, number: newNumber})\n        } else{\n            addPerson({ newName, newNumber });\n        }\n        setNewName('');\n        setNewNumber('');\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n    \n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    return (\n        <form onSubmit={addName}>\n            <div>\n            name: <input\n                value={newName}\n                onChange={handleNameChange}\n            />\n            </div>\n            <div>\n            number: <input\n                value={newNumber}\n                onChange={handleNumberChange}\n            />\n            </div>\n            <div>\n            <button type=\"submit\" >add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst confirmMessage = (name) =>{\n    return window.confirm(`Delete ${name}`);\n}\n\nconst Persons = ({ personsToShow, removePerson }) => (\n    <ul>\n        {personsToShow.map(p => <li>{p.name} {p.number} <button onClick={()=>{confirmMessage(p.name) && removePerson(p.id)}}>delete</button></li>)}\n    </ul>\n)\n\nexport default Persons","import axios from 'axios';\n\nconst baseUrl = '/persons';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove };","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    const { message, type } = notification;\n\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport servicePerson from './services/index'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: 465464 }\n  ])\n\n  const [ filterInput, setFilterInput ] = useState('')\n  const [ notification, setNotification ] = useState({});\n\n  const hook = () => {\n    servicePerson.getAll().then(response => {\n      setPersons(response);\n    })\n  }\n  \n  useEffect(hook, [])\n\n  const personsToShow = persons.filter(person => person.name.indexOf(filterInput) > -1)\n\n  const findName = (newName) => {\n    return persons.find(a => a.name === newName)\n  }\n\n  const addPerson = ({ newName, newNumber }) => {\n    servicePerson.create({name: newName, number: newNumber})\n      .then(person => {\n        const newPersons = [...persons, person];\n        setPersons(newPersons);\n        setNotification({type:'success', message: `Added ${person.name}`});\n      });\n  }\n\n  const removePerson = (id) => {\n    servicePerson.remove(id).then(response => {\n      const arrPerson = persons.filter(person => person.id !== id );\n      setPersons(arrPerson);\n    }).catch(error => {\n      setNotification({type:'error', message: `Error in server`});\n    });\n  }\n\n  const updatePerson = (person) => {\n    servicePerson.update(person.id, person).then(personUpdated => {\n      const arrPerson = persons.map(p => personUpdated.id === p.id ? personUpdated : p );\n      setPersons(arrPerson);\n    }).catch(error => {\n      setNotification({type:'error', message: `Information of ${person.name} has already been removed from server`});\n    });\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterInput(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter filterInput={filterInput} handleFilterChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm addPerson={addPerson} findName = {findName} updatePerson={updatePerson}/>\n      <h2>Numbers</h2>\n      <Persons personsToShow={personsToShow} removePerson={removePerson}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}